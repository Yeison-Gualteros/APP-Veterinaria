{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useCallback } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useCalendarContext } from \"../CalendarContext\";\nimport { getDateYear, getYearRange } from \"../utils\";\nvar YearSelector = function YearSelector() {\n  var _useCalendarContext = useCalendarContext(),\n    currentDate = _useCalendarContext.currentDate,\n    currentYear = _useCalendarContext.currentYear,\n    selectedDate = _useCalendarContext.selectedDate,\n    onSelectYear = _useCalendarContext.onSelectYear,\n    theme = _useCalendarContext.theme;\n  var selectedYear = getDateYear(selectedDate);\n  var generateCells = useCallback(function () {\n    var years = getYearRange(currentYear);\n    var activeYear = getDateYear(currentDate);\n    var column = years.map(function (year) {\n      var activeItemStyle = year === selectedYear ? {\n        borderColor: (theme === null || theme === void 0 ? void 0 : theme.selectedItemColor) || '#0047FF',\n        backgroundColor: (theme === null || theme === void 0 ? void 0 : theme.selectedItemColor) || '#0047FF'\n      } : year === activeYear ? {\n        borderColor: (theme === null || theme === void 0 ? void 0 : theme.selectedItemColor) || '#0047FF'\n      } : {};\n      var textStyle = year === selectedYear ? _objectSpread({\n        color: '#fff'\n      }, theme === null || theme === void 0 ? void 0 : theme.selectedTextStyle) : year === activeYear ? {\n        color: (theme === null || theme === void 0 ? void 0 : theme.selectedItemColor) || '#0047FF',\n        fontWeight: 'bold'\n      } : _objectSpread({}, theme === null || theme === void 0 ? void 0 : theme.calendarTextStyle);\n      return React.createElement(Pressable, {\n        key: year,\n        onPress: function onPress() {\n          return onSelectYear(year);\n        },\n        style: styles.yearCell,\n        accessibilityRole: \"button\",\n        accessibilityLabel: year.toString()\n      }, React.createElement(View, {\n        style: [styles.year, theme === null || theme === void 0 ? void 0 : theme.yearContainerStyle, activeItemStyle]\n      }, React.createElement(Text, {\n        key: year,\n        style: textStyle\n      }, year)));\n    });\n    return column;\n  }, [onSelectYear, selectedYear, currentYear, currentDate, theme]);\n  return React.createElement(View, {\n    style: styles.container,\n    testID: \"year-selector\"\n  }, React.createElement(View, {\n    style: styles.years\n  }, generateCells()));\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 5,\n    width: '100%'\n  },\n  yearCell: {\n    width: '33.3%'\n  },\n  years: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    width: '100%'\n  },\n  year: {\n    paddingVertical: 15,\n    margin: 2,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderRadius: 8,\n    borderColor: '#E5E5E5',\n    backgroundColor: '#FFFFFF'\n  }\n});\nexport default YearSelector;","map":{"version":3,"names":["React","useCallback","Text","View","Pressable","StyleSheet","useCalendarContext","getDateYear","getYearRange","YearSelector","_useCalendarContext","currentDate","currentYear","selectedDate","onSelectYear","theme","selectedYear","generateCells","years","activeYear","column","map","year","activeItemStyle","borderColor","selectedItemColor","backgroundColor","textStyle","_objectSpread","color","selectedTextStyle","fontWeight","calendarTextStyle","createElement","key","onPress","style","styles","yearCell","accessibilityRole","accessibilityLabel","toString","yearContainerStyle","container","testID","create","flex","alignItems","justifyContent","margin","width","flexDirection","flexWrap","paddingVertical","borderWidth","borderRadius"],"sources":["C:\\Users\\Jesus\\Desktop\\agendar-citas-veterinaria-ult-version\\node_modules\\react-native-ui-datepicker\\src\\components\\YearSelector.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport {\n  Text,\n  View,\n  Pressable,\n  StyleSheet,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport { useCalendarContext } from '../CalendarContext';\nimport { getDateYear, getYearRange } from '../utils';\n\nconst YearSelector = () => {\n  const { currentDate, currentYear, selectedDate, onSelectYear, theme } =\n    useCalendarContext();\n  const selectedYear = getDateYear(selectedDate);\n\n  const generateCells = useCallback(() => {\n    const years = getYearRange(currentYear);\n    const activeYear = getDateYear(currentDate);\n    const column = years.map((year) => {\n      const activeItemStyle: ViewStyle =\n        year === selectedYear\n          ? {\n              borderColor: theme?.selectedItemColor || '#0047FF',\n              backgroundColor: theme?.selectedItemColor || '#0047FF',\n            }\n          : year === activeYear\n          ? {\n              borderColor: theme?.selectedItemColor || '#0047FF',\n            }\n          : {};\n\n      const textStyle: TextStyle =\n        year === selectedYear\n          ? { color: '#fff', ...theme?.selectedTextStyle }\n          : year === activeYear\n          ? {\n              color: theme?.selectedItemColor || '#0047FF',\n              fontWeight: 'bold',\n            }\n          : { ...theme?.calendarTextStyle };\n\n      return (\n        <Pressable\n          key={year}\n          onPress={() => onSelectYear(year)}\n          style={styles.yearCell}\n          accessibilityRole=\"button\"\n          accessibilityLabel={year.toString()}\n        >\n          <View\n            style={[styles.year, theme?.yearContainerStyle, activeItemStyle]}\n          >\n            <Text key={year} style={textStyle}>\n              {year}\n            </Text>\n          </View>\n        </Pressable>\n      );\n    });\n    return column;\n  }, [onSelectYear, selectedYear, currentYear, currentDate, theme]);\n\n  return (\n    <View style={styles.container} testID=\"year-selector\">\n      <View style={styles.years}>{generateCells()}</View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 5,\n    width: '100%',\n  },\n  yearCell: {\n    width: '33.3%',\n  },\n  years: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    width: '100%',\n  },\n  year: {\n    paddingVertical: 15,\n    margin: 2,\n    alignItems: 'center',\n    borderWidth: 1,\n    borderRadius: 8,\n    borderColor: '#E5E5E5',\n    backgroundColor: '#FFFFFF',\n  },\n});\n\nexport default YearSelector;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAAA,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,UAAA;AAS1C,SAASC,kBAAkB;AAC3B,SAASC,WAAW,EAAEC,YAAY;AAElC,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;EACzB,IAAAC,mBAAA,GACEJ,kBAAkB,CAAC,CAAC;IADdK,WAAW,GAAAD,mBAAA,CAAXC,WAAW;IAAEC,WAAW,GAAAF,mBAAA,CAAXE,WAAW;IAAEC,YAAY,GAAAH,mBAAA,CAAZG,YAAY;IAAEC,YAAY,GAAAJ,mBAAA,CAAZI,YAAY;IAAEC,KAAA,GAAAL,mBAAA,CAAAK,KAAA;EAE9D,IAAMC,YAAY,GAAGT,WAAW,CAACM,YAAY,CAAC;EAE9C,IAAMI,aAAa,GAAGhB,WAAW,CAAC,YAAM;IACtC,IAAMiB,KAAK,GAAGV,YAAY,CAACI,WAAW,CAAC;IACvC,IAAMO,UAAU,GAAGZ,WAAW,CAACI,WAAW,CAAC;IAC3C,IAAMS,MAAM,GAAGF,KAAK,CAACG,GAAG,CAAE,UAAAC,IAAI,EAAK;MACjC,IAAMC,eAA0B,GAC9BD,IAAI,KAAKN,YAAY,GACjB;QACEQ,WAAW,EAAE,CAAAT,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEU,iBAAiB,KAAI,SAAS;QAClDC,eAAe,EAAE,CAAAX,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEU,iBAAiB,KAAI;MAC/C,CAAC,GACDH,IAAI,KAAKH,UAAU,GACnB;QACEK,WAAW,EAAE,CAAAT,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEU,iBAAiB,KAAI;MAC3C,CAAC,GACD,CAAC,CAAC;MAER,IAAME,SAAoB,GACxBL,IAAI,KAAKN,YAAY,GAAAY,aAAA;QACfC,KAAK,EAAE;MAAM,GAAKd,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEe,iBAAiB,IAC5CR,IAAI,KAAKH,UAAU,GACnB;QACEU,KAAK,EAAE,CAAAd,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEU,iBAAiB,KAAI,SAAS;QAC5CM,UAAU,EAAE;MACd,CAAC,GAAAH,aAAA,KACIb,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEiB,iBAAiB,CAAE;MAErC,OACEhC,KAAA,CAAAiC,aAAA,CAAC7B,SAAS;QACR8B,GAAG,EAAEZ,IAAK;QACVa,OAAO,EAAE,SAAAA,QAAA;UAAA,OAAMrB,YAAY,CAACQ,IAAI,CAAE;QAAA;QAClCc,KAAK,EAAEC,MAAM,CAACC,QAAS;QACvBC,iBAAiB,EAAC,QAAQ;QAC1BC,kBAAkB,EAAElB,IAAI,CAACmB,QAAQ,CAAC;MAAE,GAEpCzC,KAAA,CAAAiC,aAAA,CAAC9B,IAAI;QACHiC,KAAK,EAAE,CAACC,MAAM,CAACf,IAAI,EAAEP,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAE2B,kBAAkB,EAAEnB,eAAe;MAAE,GAEjEvB,KAAA,CAAAiC,aAAA,CAAC/B,IAAI;QAACgC,GAAG,EAAEZ,IAAK;QAACc,KAAK,EAAET;MAAU,GAC/BL,IACG,CACF,CACG,CAAC;IAEhB,CAAC,CAAC;IACF,OAAOF,MAAM;EACf,CAAC,EAAE,CAACN,YAAY,EAAEE,YAAY,EAAEJ,WAAW,EAAED,WAAW,EAAEI,KAAK,CAAC,CAAC;EAEjE,OACEf,KAAA,CAAAiC,aAAA,CAAC9B,IAAI;IAACiC,KAAK,EAAEC,MAAM,CAACM,SAAU;IAACC,MAAM,EAAC;EAAe,GACnD5C,KAAA,CAAAiC,aAAA,CAAC9B,IAAI;IAACiC,KAAK,EAAEC,MAAM,CAACnB;EAAM,GAAED,aAAa,CAAC,CAAQ,CAC9C,CAAC;AAEX,CAAC;AAED,IAAMoB,MAAM,GAAGhC,UAAU,CAACwC,MAAM,CAAC;EAC/BF,SAAS,EAAE;IACTG,IAAI,EAAE,CAAC;IACPC,UAAU,EAAE,QAAQ;IACpBC,cAAc,EAAE,QAAQ;IACxBC,MAAM,EAAE,CAAC;IACTC,KAAK,EAAE;EACT,CAAC;EACDZ,QAAQ,EAAE;IACRY,KAAK,EAAE;EACT,CAAC;EACDhC,KAAK,EAAE;IACLiC,aAAa,EAAE,KAAK;IACpBC,QAAQ,EAAE,MAAM;IAChBF,KAAK,EAAE;EACT,CAAC;EACD5B,IAAI,EAAE;IACJ+B,eAAe,EAAE,EAAE;IACnBJ,MAAM,EAAE,CAAC;IACTF,UAAU,EAAE,QAAQ;IACpBO,WAAW,EAAE,CAAC;IACdC,YAAY,EAAE,CAAC;IACf/B,WAAW,EAAE,SAAS;IACtBE,eAAe,EAAE;EACnB;AACF,CAAC,CAAC;AAEF,eAAejB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}